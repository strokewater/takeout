package org.project.takeout.controller;

import org.project.takeout.TakeOutException;
import org.project.takeout.biz.IAdminBiz;
import org.project.takeout.biz.IGoodOrderBiz;
import org.project.takeout.pojo.Admin;
import org.project.takeout.pojo.JsonResult;
import org.project.takeout.util.ContextHolderUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.lang.String;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

@Controller("adminController")
@RequestMapping("/admin")
public class AdminController {
    @Resource
    private IAdminBiz adminBiz;

    @Resource
    private IGoodOrderBiz goodOrderBiz;

    @RequestMapping("/login")
    public String showLoginPage(HttpSession session, HttpServletRequest request) {
        String redirectUri = (String)session.getAttribute("redirectUri");
        if (redirectUri == null)
        {
            // 如果不是因为被拦截器拦截forward到这的，一律在登陆后转向首页
            session.setAttribute("redirectUri", request.getContextPath() + "/admin/index");
        }
        return "admin/login.jsp";
    }

    @RequestMapping("/doLogin")
    @ResponseBody
    public JsonResult doLogin(@RequestParam("userName") String userName,
                              @RequestParam("password") String password)
    {
        HttpServletRequest request = ContextHolderUtils.getRequest();
        HttpSession session = ContextHolderUtils.getSession();

        Admin admin = new Admin();
        admin.setUserName(userName);
        admin.setPassword(password);

        String redirectUri = (String)session.getAttribute("redirectUri");
        session.removeAttribute("redirectUri");

        return ContextHolderUtils.redirectToPrevPage(adminBiz.login(admin), redirectUri);
    }

    @RequestMapping("/doLogout")
    public String doLogout(Model model)
    {
        boolean isSuccess = true;

        try {
            adminBiz.logout();
        } catch (TakeOutException e)
        {
            model.addAttribute("errorMsg", e.getMessage());
            isSuccess = false;
        }

        if (isSuccess)
            return "redirect:/admin/login";
        else
            return "redirect:/error";
    }

    @RequestMapping("/changePassword")
    @ResponseBody
    public JsonResult changePassword(@RequestParam("oldPassword") String oldPassword,
                                     @RequestParam("newPassword") String newPassword) {
        JsonResult result = new JsonResult();

        Admin admin = adminBiz.getCurrentAdmin();
        if (adminBiz.changePassword(admin.getId(), oldPassword, newPassword))
            result.setResult(JsonResult.RESULT_TRUE);
        else
            result.setResult(JsonResult.RESULT_FALSE);

        return result;
    }

    @RequestMapping("/requestLoginJson")
    @ResponseBody
    public JsonResult requestLoginJson() {
        JsonResult result = new JsonResult();
        result.setResult(JsonResult.RESULT_NOT_LOGIN);
        return result;
    }

    @RequestMapping(value = {"/", "/index"})
    public String showAdminIndexPage()
    {
        HttpServletRequest request = ContextHolderUtils.getRequest();

        request.setAttribute("thisDayMoney", goodOrderBiz.getThisDayIncome());
        request.setAttribute("thisMonthMoney", goodOrderBiz.getThisMonthIncome());
        request.setAttribute("thisYearMoney", goodOrderBiz.getThisYearIncome());

        return "admin/index.jsp";
    }

    @RequestMapping("/customer")
    public String forwardToCustomerManager() {
        return "forward:/admin/customer/index";
    }

    @RequestMapping("/category")
    public String forwardToCategoryManager() {return "forward:/admin/category/index"; }

    @RequestMapping("/good")
    public String forwardToGoodManager() { return "forward:/admin/good/index"; }

    @RequestMapping("/order")
    public String forwardToGoodOrderManager() { return "forward:/admin/order/index"; }

    public void setAdminBiz(IAdminBiz adminBiz) {
        this.adminBiz = adminBiz;
    }
}
